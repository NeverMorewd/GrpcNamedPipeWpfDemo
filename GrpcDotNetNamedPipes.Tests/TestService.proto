/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package GrpcDotNetNamedPipes.Tests.Generated;

service TestService {
    rpc SimpleUnary (RequestMessage) returns (ResponseMessage) {}
    rpc DelayedUnary (RequestMessage) returns (ResponseMessage) {}
    rpc ThrowingUnary (RequestMessage) returns (ResponseMessage) {}
    rpc DelayedThrowingUnary (RequestMessage) returns (ResponseMessage) {}
    rpc ClientStreaming (stream RequestMessage) returns (ResponseMessage) {}
    rpc ServerStreaming (RequestMessage) returns (stream ResponseMessage) {}
    rpc DelayedServerStreaming (RequestMessage) returns (stream ResponseMessage) {}
    rpc ThrowingServerStreaming (RequestMessage) returns (stream ResponseMessage) {}
    rpc DuplexStreaming (stream RequestMessage) returns (stream ResponseMessage) {}
    rpc DelayedDuplexStreaming (stream RequestMessage) returns (stream ResponseMessage) {}
    rpc ThrowingDuplexStreaming (stream RequestMessage) returns (stream ResponseMessage) {}
    rpc HeadersTrailers (RequestMessage) returns (ResponseMessage) {}
    rpc SetStatus (RequestMessage) returns (ResponseMessage) {}
    rpc GetCallInfo (RequestMessage) returns (ResponseMessage) {}
    rpc DropConnection (RequestMessage) returns (ResponseMessage) {}
    rpc DropConnectionClientStreaming (stream RequestMessage) returns (ResponseMessage) {}
    rpc WaitForCancellation (RequestMessage) returns (ResponseMessage) {}
}

message RequestMessage {
    int32 value = 1;
    bytes binary = 2;
}

message ResponseMessage {
    int32 value = 1;
    bytes binary = 2;
}
