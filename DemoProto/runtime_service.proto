syntax = "proto3";
package rpa.core.runtimehost;

message InitRequestMessage
{
	string client_id = 1;
	bool is_async = 2;
	InitRequestPayload payload = 3;
	bool need_ui_thread = 4;
}
message SetParamRequestMessage
{
	string client_id = 1;
	bool is_async = 2;
	SetParamRequestPayload payload = 3;
	bool need_ui_thread = 4;
}
message RunRequestMessage
{
	string client_id = 1;
	bool is_async = 2;
	RunRequestPayload payload = 3;
	bool need_ui_thread = 4;
}
message DisposeRequestMessage
{
	string client_id = 1;
	bool is_async = 2;
	DisposeRequestPayload payload = 3;
	bool need_ui_thread = 4;
}

message ShutDownRequestMessage
{
	string client_id = 1;
	bool is_async = 2;
	ShutDownRequestPayload payload = 3;
	bool need_ui_thread = 4;
}

message InitRequestPayload
{
    string package_path = 1;
	string install_dir_path = 2;
    string plugin_path = 3;
}
message SetParamRequestPayload
{
    string json_param = 1;
}
message RunRequestPayload
{
    string package_path = 1;
	string plugin_name = 2;
	string plugin_action = 3;
	string plugin_param = 4;
	string plugin_version = 5;
    string plugin_path = 6;
}
message ShutDownRequestPayload
{
	string package_path = 1;
    int32 exit_code = 2;
}
message DisposeRequestPayload
{
	string package_path = 1;
    string plugin_path = 2;
}
message ReturnMessage
{
	string payload = 1;
}
message RunTimeMessage
{
	string client_id = 1;
	string action = 2;
	int32 process_id = 3;
	string payload = 4;
}
message BeepMessage
{
	string client_id = 1;
	int32 process_id = 2;
	string payload = 3;
}
message ServiceDebugRequest
{
	string client_id = 1;
	ServiceDebugRequestPayload payload = 2;
}

message ServiceDebugRequestPayload
{
	int32 info_level = 1;
	bool need_log = 2;
}

service RunTimeService 
{
	rpc RunUnary(RunRequestMessage) returns (ReturnMessage);
	rpc InitUnary(InitRequestMessage) returns (ReturnMessage);
	rpc SetParamUnary(SetParamRequestMessage) returns (ReturnMessage);
	rpc DisposeUnary(DisposeRequestMessage) returns (ReturnMessage);
	rpc ShutDownUnary(ShutDownRequestMessage) returns (ReturnMessage);
	rpc RunTimeMessageStreaming(RunTimeMessage) returns (stream RunTimeMessage);

	rpc BeepUnary(BeepMessage) returns(BeepMessage);
	rpc ServiceDebugUnary(ServiceDebugRequest) returns(ReturnMessage);
}